{"version":3,"sources":["assets/logos/Orochimaru2.jpg","components/greeting.js","components/imageAlbum.js","components/counter.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Greeting","props","console","log","name","ImageAlbum","this","src","imageSrc","alt","React","Component","Counter","state","count","tambah","setState","kurang","alert","onClick","App","className","gambarnya","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"uHAAAA,EAAOC,QAAU,IAA0B,yC,6JCU5BC,MARf,SAAkBC,GAEd,OADAC,QAAQC,IAAIF,GAER,6BACI,qCAAWA,EAAMG,Q,mCCSdC,E,+KAVNJ,GAEL,OADEC,QAAQC,IAAIG,KAAKL,OAEjB,6BACE,yBAAKM,IAAKD,KAAKL,MAAMO,SAAUC,IAAI,c,GALlBC,IAAMC,W,gBC2BhBC,E,2MA7BXC,MAAQ,CACJC,MAAO,G,EAEXC,OAAS,WACL,EAAKC,UAAS,kBAAgB,CAC1BF,MADU,EAAGA,MACE,O,EAGvBG,OAAS,WACe,IAApB,EAAKJ,MAAMC,MACd,EAAKE,UAAS,kBAAgB,CACvBF,MADO,EAAGA,MACK,MAGnBI,MAAO,Q,wEAMP,OAAQ,6BACJ,4BAAQC,QAASb,KAAKS,QAAtB,KACA,2BAAIT,KAAKO,MAAMC,OACf,4BAAQK,QAASb,KAAKW,QAAtB,U,GAxBWP,IAAMC,WCkBdS,MAZf,WACE,OACE,yBAAKC,UAAU,OAEb,kBAAC,EAAD,CAAUjB,KAAK,SAFjB,IAGE,uBAAGiB,UAAU,aAAb,0FACA,kBAAC,EAAD,MACA,kBAAC,EAAD,CAAYb,SAAUc,QCFRC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.6ffdc64e.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/Orochimaru2.ca8fc76b.jpg\";","import React from 'react';\n\nfunction Greeting(props) {\n    console.log(props)\n    return (\n        <div>\n            <h1>hallo {props.name}</h1>\n        </div>\n    )\n}\nexport default Greeting;","import React from \"react\";\n\n\n\nclass ImageAlbum extends React.Component {\n  render(props) {\n      console.log(this.props)\n    return (\n      <div>\n        <img src={this.props.imageSrc} alt=\"user\" />\n      </div>\n    );\n  }\n}\n\nexport default ImageAlbum;\n","import React from 'react'\nclass  Counter extends React.Component {\n    state = {\n        count: 0\n    }\n    tambah = () => {\n        this.setState(({ count }) => ({\n            count: count + 1\n        })) \n    }\n    kurang = () => {\n    if (this.state.count !==0)  \n    {this.setState(({ count }) => ({\n            count: count - 1\n        }))}\n        else \n        alert (\"wow\")\n        \n    }\n    \n   \n    render() {\n        return (<div>\n            <button onClick={this.tambah}>+</button>\n            <p>{this.state.count}</p>\n            <button onClick={this.kurang}>-</button>\n            \n            </div>)\n\n    }\n}\nexport default Counter","import React from \"react\";\nimport \"./App.css\";\nimport Greeting from \"./components/greeting\";\nimport ImageAlbum from './components/imageAlbum'\nimport gambarnya from './assets/logos/Orochimaru2.jpg'\nimport Counter from './components/counter'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      \n      <Greeting name=\"dean\"/> {/*ini adalah komponen*/} \n      <p className=\"app-intro\">Jumat Berkah, semoga apa yang kita kerjakan senantiasa diberi kemudahan dari Allah SWT</p>\n      <Counter/>\n      <ImageAlbum imageSrc={gambarnya} />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}